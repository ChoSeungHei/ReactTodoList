{"version":3,"sources":["todo/TodoItem.js","todo/TodoList.js","todo/InputTodo.js","todo/Template.js","App.js","serviceWorker.js","index.js"],"names":["TextLine","styled","span","NormalLine","Container","div","TodoItem","props","flag","removeItem","text","id","remove","handleCheck","className","type","checked","onChange","htmlFor","Provider","value","color","size","e","onClick","stopPropagation","TodoList","todoTexts","printTodoList","map","ary","index","key","InputBox","input","SubmitBtn","button","InputTodo","useState","todoText","setTodoText","setTodoTexts","setId","useEffect","temp","JSON","parse","localStorage","getItem","todo_id","console","log","handleSubmit","setItem","stringify","maxlength","placeholder","autoFocus","target","onKeyPress","todo","setTimeout","filter","GlobalStyles","createGlobalStyle","reset","DateTitle","Title","Template","today","setToday","getToday","Date","year","getFullYear","month","getMonth","date","getDate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a966abb.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport '../style/style.css';\r\nimport '../style/animate.css'\r\nimport styled from 'styled-components';\r\nimport {IoMdClose} from 'react-icons/io';\r\nimport { IconContext } from \"react-icons\";\r\n\r\nconst TextLine = styled.span`\r\n    text-decoration:line-through;\r\n    margin-left: 5px;\r\n`;\r\n\r\nconst NormalLine = styled.span`\r\n    margin-left: 5px;\r\n`;\r\nconst Container = styled.div`\r\n    display:flex;\r\n    align-items:center;\r\n    margin: 10px;\r\n`;\r\n\r\nconst TodoItem = (props) => {\r\n    const {flag, removeItem, text, id,remove,handleCheck} = props;\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                !remove ?(\r\n                    <div>\r\n                        <Container>\r\n                            <input type=\"checkbox\" id={id} checked={flag} onChange={(e)=>{handleCheck(id)}}/>\r\n                                <label htmlFor={id}>\r\n                                    <div className=\"tick\"></div>\r\n                                </label>\r\n                            {\r\n                                flag ? (\r\n                                    <TextLine>{text}</TextLine>\r\n                                ):(<NormalLine>{text}</NormalLine>)\r\n                            }\r\n                            <IconContext.Provider value={{ color:\"#555\", size:\"1.5em\", className: \"global-class-name\" }}>\r\n                                <IoMdClose onClick={(e) => {\r\n                                    e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n                                    removeItem(id);\r\n                                }}/>\r\n                            </IconContext.Provider>\r\n                            \r\n                        </Container>\r\n                    </div>\r\n                ):(\r\n                    <div className=\"animate__animated animate__fadeOutLeft\">\r\n                        <Container>\r\n                            <input type=\"checkbox\" id={id} checked={flag} onChange={handleCheck}/>\r\n                                <label htmlFor={id}>\r\n                                    <div className=\"tick\"></div>\r\n                                </label>\r\n                            {\r\n                                flag ? (\r\n                                    <TextLine>{text}</TextLine>\r\n                                ):(<span>{text}</span>)\r\n                            }\r\n                            <IconContext.Provider value={{ color:\"#555\", size:\"1.5em\", className: \"global-class-name\" }}>\r\n                                <IoMdClose/>\r\n                            </IconContext.Provider>\r\n                            \r\n                        </Container>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React,{useState,useEffect} from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport styled from 'styled-components';\r\n\r\nconst Container  = styled.div`\r\n    with: 100%;\r\n    height: 70%;\r\n    margin-top: 3%;\r\n    background-color: rgb(255,255,255);\r\n    overflow:auto;\r\n`;\r\n\r\nconst TodoList = props => {\r\n    const {todoTexts, removeItem,handleCheck} = props;\r\n    \r\n    const printTodoList = todoTexts.map((ary,index)=>(<TodoItem key={index} id={ary.id} text={ary.text} flag={ary.flag} removeItem={removeItem} remove={ary.remove} handleCheck={handleCheck}/>))\r\n\r\n\r\n    return(\r\n        <Container>{printTodoList}</Container>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React,{useState,useEffect} from 'react';\r\nimport TodoList from './TodoList';\r\nimport styled from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst Container = styled.div`\r\n    margin: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    text-align:left;\r\n    @media(min-width:768px)\r\n    {\r\n        text-align:center;\r\n    }\r\n`;\r\n\r\nconst InputBox = styled.input`\r\n    border: none;\r\n    height: 40px;\r\n    width : 85%;\r\n    line-height: 40px;\r\n    outline:none;\r\n    padding-left: 3px;\r\n    padding-rignt: 3px;\r\n    margin: 0;\r\n\r\n    @media(min-width:768px)\r\n    {\r\n        width : 90%;\r\n    }\r\n`;\r\n\r\nconst SubmitBtn = styled.button`\r\n    border: none;\r\n    background-color: rgba(0,0,0,0);\r\n    color: #78B6FF;\r\n    font-weight: 800;\r\n    width: 10%;\r\n    margin-left: 2%;\r\n    &:hover {\r\n    color: #1981FF;\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n    @media(min-width:768px)\r\n    {\r\n        width: 9%;\r\n        margin-left: 1%;\r\n    }\r\n`;\r\n\r\nconst InputTodo = () => {\r\n    const [todoText,setTodoText] = useState('');\r\n    const [todoTexts,setTodoTexts] = useState([]);\r\n    const [id,setId] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        var temp = JSON.parse(localStorage.getItem('TODO_VALUES'));\r\n        var todo_id = localStorage.getItem('TODO_ID');\r\n        console.log(todo_id);\r\n\r\n        if(temp !== null)\r\n        {\r\n            setTodoTexts(temp);\r\n            setId(todo_id);\r\n        }\r\n    },[]);\r\n\r\n    const handleSubmit = () => {\r\n        if(todoText != \"\")\r\n        {\r\n            setTodoTexts(todoTexts=>[...todoTexts,{id:id ,text: todoText,flag: false,remove: false}]);\r\n            setTodoText('');\r\n            var temp = id;\r\n            setId(++temp);\r\n\r\n            var ary = [...todoTexts,{id:id ,text: todoText,flag: false,remove: false}];\r\n\r\n            localStorage.removeItem('TODO_VALUES');\r\n            localStorage.setItem('TODO_VALUES', JSON.stringify(ary));\r\n\r\n            localStorage.removeItem('TODO_ID');\r\n            localStorage.setItem('TODO_ID',++temp);\r\n        }\r\n    }\r\n\r\n    const removeItem = (id) => {\r\n        setTodoTexts(todoTexts.map(todo => todo.id == id ? ({...todo, remove: true}):todo));\r\n        setTimeout(() => {\r\n            setTodoTexts(todoTexts.filter(todo => todo.id !== id));\r\n            var temp = todoTexts.filter(todo => todo.id !== id);\r\n\r\n            localStorage.removeItem('TODO_VALUES');\r\n            localStorage.setItem('TODO_VALUES',JSON.stringify(temp));\r\n        }, 500);\r\n    }\r\n\r\n    const handleCheck = (id) => {\r\n        setTodoTexts(todoTexts.map(todo => todo.id == id ? ({...todo, flag: !todo.flag}):todo));\r\n\r\n        var temp = todoTexts.map(todo => todo.id == id ? ({...todo, flag: !todo.flag}):todo);\r\n        localStorage.removeItem('TODO_VALUES');\r\n        localStorage.setItem('TODO_VALUES',JSON.stringify(temp));\r\n    }\r\n    \r\n    const changeTodo = (e) => {\r\n        setTodoText(e.target.value);\r\n    }\r\n\r\n    const onKeyPress = (e) => {\r\n        if(e.key == 'Enter')\r\n        {\r\n            handleSubmit();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <InputBox maxlength=\"10\" placeholder=\"Input Text\" autoFocus onChange={changeTodo} value={todoText} onKeyPress={onKeyPress}/>\r\n            <SubmitBtn onClick={handleSubmit}>ADD</SubmitBtn>\r\n            <TodoList todoTexts={todoTexts} removeItem={removeItem} handleCheck={handleCheck}/>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default InputTodo;","import React,{useState, useEffect} from 'react';\r\nimport InputTodo from './InputTodo';\r\nimport styled, { createGlobalStyle }  from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst Container = styled.div`\r\n    position: absolute;\r\n    top: 50%; left: 50%;\r\n    width: 90%; height: 450px;\r\n    margin: -225px 0px 0px -45%;\r\n    padding: 2%;\r\n    background-color: rgba(255, 255, 255, 0.8);\r\n    \r\n    color:#555;\r\n    @media(min-width:768px)\r\n    {\r\n        width: 40%; height: 450px;\r\n        margin: -225px 0px 0px -20%;\r\n    }\r\n`;\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration: none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    @font-face{\r\n        font-family:\"NanumGothic\";\r\n        font-weight: normal;\r\n        src: url(\"../font/NanumGothic.woff\") format(\"woff\");\r\n    }\r\n    body {\r\n        font-family: \"NanumGothic\";\r\n        background: linear-gradient( to bottom, #FF4A4F, #FF5C7D );\r\n    }\r\n`;\r\n\r\nconst DateTitle = styled.div`\r\n    font-size: 1rem;\r\n    margin-bottom: 10px;\r\n    text-align:center;\r\n`;\r\n\r\nconst Title = styled.div`\r\n    font-size: 1.5rem; \r\n    margin-bottom: 10px;\r\n    font-weight: 600;\r\n    text-align:center;\r\n    margin-top:10px;\r\n    @media(min-width:768px)\r\n    {\r\n        margin-top:0px;\r\n    }\r\n`;\r\n\r\nconst Template = () => {\r\n    const [today,setToday] = useState('');\r\n\r\n    useEffect(()=>{\r\n        setToday(getToday());\r\n    });\r\n\r\n    const getToday = () => {\r\n        let today = new Date();  \r\n        let year = today.getFullYear(); // 년도\r\n        let month = today.getMonth() + 1;  // 월\r\n        let date = today.getDate();  // 날짜\r\n\r\n        if(month <10)\r\n        {\r\n            month = \"0\"+month;\r\n        }\r\n        if(date <10)\r\n        {\r\n            date = \"0\"+date;\r\n        }\r\n        return year+\".\"+month+\".\"+date;\r\n    }\r\n\r\n    return(\r\n        \r\n        <>\r\n            <GlobalStyles/>\r\n            <Container>\r\n                <Title>To-Do List</Title>\r\n                <DateTitle>{today}</DateTitle>\r\n                <InputTodo/>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Template;","import React from 'react';\nimport Template from './todo/Template';\n\nfunction App() {\n  return (\n    <Template/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}